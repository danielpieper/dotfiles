{{- $licenseKey := "" -}}
{{- range (first (onepassword "ucpdges4uyo3uaj2kmhe4e5diq").details.sections).fields -}}
  {{- if eq .n "reg_code" -}}
    {{- $licenseKey = .v -}}
  {{- end -}}
{{- end }}
local utils = require('utils')
local lsp_status = require('lsp-status')
lsp_status.register_progress()

local lspconfig = require('lspconfig')
local configs = require('lspconfig/configs')
local lsp_signature = require('lsp_signature')
local lspcontainers = require('lspcontainers')

-- Set log level
-- Levels by name: "trace", "debug", "info", "warn", "error"
-- vim.lsp.set_log_level("trace")

-- Diagnostic configuration
--
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    underline = true,
    virtual_text = false,
    -- virtual_text = {
    --   spacing = 4,
    --   prefix = '',
    -- },
    signs = true,
    update_in_insert = false,
  }
)

vim.fn.sign_define('LspDiagnosticsSignError', {text = '', texthl = 'LspDiagnosticsSignError'})
vim.fn.sign_define('LspDiagnosticsSignWarning', {text = '', texthl = 'LspDiagnosticsSignWarning'})
vim.fn.sign_define('LspDiagnosticsSignInformation', {text = '', texthl = 'LspDiagnosticsSignInformation'})
vim.fn.sign_define('LspDiagnosticsSignHint', {text = '', texthl = 'LspDiagnosticsSignHint'})

local on_attach = function(client, bufnr)
  lsp_status.on_attach(client)
  lsp_signature.on_attach({
    bind = true,
    hint_enable = false,
  })

  -- Intelephense Hotfix, see https://github.com/nvim-lua/completion-nvim/issues/252#issuecomment-716048547
  -- Set $ as keyword to fix Intelephense (php) completion
  vim.api.nvim_buf_set_option(bufnr, "iskeyword", "@,48-57,_,192-255,$")

  -- Always use autoindent 
  -- php workaround, see https://vi.stackexchange.com/questions/11023/auto-indent-turns-off-itself-automatically-on-php-files
  vim.api.nvim_buf_set_option(bufnr, "indentexpr", "")
  vim.api.nvim_buf_set_option(bufnr, "autoindent", true)
  vim.api.nvim_buf_set_option(bufnr, "smartindent", true)

  -- Keybindings for LSPs
  local opts = { noremap=true, silent=true }
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gh", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<S-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gt", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)

  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gR", "<cmd>lua vim.lsp.buf.rename()<CR>", opts)

  -- telescope does a better job at this:
  -- vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>g0", "<cmd>lua vim.lsp.buf.document_symbol()<CR>", opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gW", "<cmd>lua vim.lsp.buf.workspace_symbol()<CR>", opts)

  -- Diagnostics
  vim.api.nvim_buf_set_keymap(bufnr, "n", "[c", "<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "]c", "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>", opts)

  -- Set some keybinds conditional on server capabilities
  if client.resolved_capabilities.document_formatting then
    vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gf", "<cmd>lua vim.lsp.buf.formatting_sync()<CR>", opts)
  elseif client.resolved_capabilities.document_range_formatting then
    vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gf", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
  end

  -- Set autocommands conditional on server_capabilities
  if client.resolved_capabilities.document_highlight then
    vim.api.nvim_exec([[
      augroup lsp_document_highlight
        autocmd! * <buffer>
        autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
        autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
    ]], false)
  end
end

local servers = {
  cssls = {},
  vimls = {},
  kotlin_language_server = {
    root_dir = lspconfig.util.root_pattern( "settings.gradle", "settings.gradle.kts", ".git" ),
  },
  bashls = {
    before_init = function(params)
        params.processId = vim.NIL
      end,
      cmd = lspcontainers.command('bashls'),
      root_dir = lspconfig.util.root_pattern(".git", vim.fn.getcwd()),
  },
  dockerls = {
    before_init = function(params)
        params.processId = vim.NIL
      end,
      cmd = lspcontainers.command('dockerls'),
      root_dir = lspconfig.util.root_pattern(".git", vim.fn.getcwd()),
  },
  html = {
    before_init = function(params)
        params.processId = vim.NIL
      end,
      cmd = lspcontainers.command('html'),
      root_dir = lspconfig.util.root_pattern(".git", vim.fn.getcwd()),
  },
  gopls = {
    cmd = lspcontainers.command('gopls'),
    settings = {
      gopls = {
        -- analyses = {
        --   unusedparams = true,
        -- },
        staticcheck = true,
        ["formatting.gofumpt"] = true,
      },
    },
  },
  tsserver = {
    before_init = function(params)
        params.processId = vim.NIL
      end,
      cmd = lspcontainers.command('tsserver'),
      root_dir = lspconfig.util.root_pattern(".git", vim.fn.getcwd()),
  },
  jsonls = {
    before_init = function(params)
        params.processId = vim.NIL
      end,
      cmd = lspcontainers.command('jsonls'),
      root_dir = lspconfig.util.root_pattern(".git", vim.fn.getcwd()),
  },
  terraformls = {
    cmd = lspcontainers.command('terraformls'),
    filetypes = { "hcl", "tf", "terraform", "tfvars" },
  },
  pylsp = {
    cmd = lspcontainers.command('pylsp'),
  },
  rust_analyzer = {
    cmd = lspcontainers.command('rust_analyzer'),
  },
  yamlls = {
    before_init = function(params)
        params.processId = vim.NIL
      end,
      cmd = lspcontainers.command('yamlls'),
      root_dir = lspconfig.util.root_pattern(".git", vim.fn.getcwd()),
  },
  vuels = {
    before_init = function(params)
        params.processId = vim.NIL
      end,
      cmd = lspcontainers.command('vuels'),
      root_dir = lspconfig.util.root_pattern(".git", vim.fn.getcwd()),
  },
  sumneko_lua = {
    cmd = lspcontainers.command('sumneko_lua'),
    settings = {
      Lua = {
        runtime = {
          -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
          version = 'LuaJIT',
          -- Setup your lua path
          path = vim.split(package.path, ';'),
        },
        diagnostics = {
          -- Get the language server to recognize the `vim` global
          globals = {'vim'},
        },
        workspace = {
          -- Make the server aware of Neovim runtime files
          library = {
            [vim.fn.expand('$VIMRUNTIME/lua')] = true,
            [vim.fn.expand('$VIMRUNTIME/lua/vim/lsp')] = true,
          },
        },
      },
    },
  },
  intelephense = {
    init_options = {
      globalStoragePath = "{{ .chezmoi.homedir }}/.cache/nvim/intelephense",
      licenceKey = "{{ $licenseKey }}",
      -- clearCache = true
    }
  },
  -- psalmls = {},
  diagnosticls = {
    handlers = {
      ["textDocument/publishDiagnostics"] = vim.lsp.with(
        vim.lsp.diagnostic.on_publish_diagnostics, {
          underline = false,
          virtual_text = {
            spacing = 4,
            prefix = '',
          },
          signs = true,
          update_in_insert = false,
        }
      )
    },
    filetypes = { "php", "go", "lua", "sh", "markdown", "yaml" },
    init_options = {
      filetypes = {
        php = {"phpcs", "phpmd", "phpstan"},
        -- php = {"phpcs", "phpmd"},
        go = "golangci-lint",
        sh = "spellcheck",
        markdown = "spellcheck",
        yaml = "ansible-lint",
      },
      linters = {
        phpcs = {
          command = "phpcs",
          debounce = 100,
          rootPatterns = { "composer.json", "composer.lock", "vendor", ".git" },
          args = { "--standard=phpcs.xml", "--report=emacs", "-s", "%file" },
          offsetLine = 0,
          offsetColumn = 0,
          sourceName = "phpcs",
          formatLines = 1,
          formatPattern = {
            "^.*:(\\d+):(\\d+):\\s+(.*)\\s+-\\s+(.*)(\\r|\\n)*$",
            {
              line = 1,
              column = 2,
              message = 4,
              security = 3,
            }
          },
          securities = {
            error = "error",
            warning = "warning"
          }
        },
        phpmd = {
          command = "phpmd",
          debounce = 100,
          rootPatterns = { "composer.json", "composer.lock", "vendor", ".git" },
          args = { "%file", "json", "phpmd.xml" },
          offsetLine = 0,
          offsetColumn = 0,
          sourceName = "phpmd",
          parseJson = {
            errorsRoot = "files[0].violations",
            line = "beginLine",
            endLine = "endLine",
            security = "priority",
            message = "${rule}: ${description} (${ruleSet})"
          },
          securities = {
            [1] = "error",
            [2] = "warning",
            [3] = "info"
          }
        },
        phpstan = {
          command = "phpstan",
          debounce = 100,
          rootPatterns = { "phpstan.neon", "phpstan.neon.dist" },
          args = { "analyze", "--error-format", "raw", "--no-progress", "--memory-limit", "1G", "%file" },
          offsetColumn = 0,
          sourceName = "phpstan",
          formatLines = 1,
          formatPattern = {
            "^[^:]+:(\\d+):(.*)(\\r|\\n)*$",
            {
              line = 1,
              message = 2,
            }
          }
        },
        ['golangci-lint'] = {
          command = "golangci-lint",
          rootPatterns = { ".git", "go.mod" },
          debounce = 100,
          args = { "run", "--out-format", "json", "--enable-all", "--disable", "exhaustivestruct" },
          sourceName = "golangci-lint",
          parseJson = {
            sourceName = "Pos.Filename",
            sourceNameFilter = true,
            errorsRoot = "Issues",
            line = "Pos.Line",
            column = "Pos.Column",
            message = "[${FromLinter}] ${Text}"
          }
        },
        shellcheck = {
          command = "shellcheck",
          debounce = 100,
          args = { "--format=json", "-" },
          sourceName = "shellcheck",
          parseJson = {
            line = "line",
            column = "column",
            endLine = "endLine",
            endColumn = "endColumn",
            message = "${message} [${code}]",
            security = "level"
          },
          securities = {
              error = "error",
              warning = "warning",
              info = "info",
              style = "hint"
          }
        },
        ['ansible-lint'] = {
          command = "ansible-lint",
          rootPatterns = { ".ansible-lint", "ansible.cfg", ".git" },
          debounce = 100,
          args = { "-f", "codeclimate", "--nocolor" },
          sourceName = "ansible-lint",
          parseJson = {
            line = "location.lines.begin",
            message = "${check_name}",
            security = "severity"
          },
          securities = {
              error = "error",
              warning = "warning",
              info = "info",
          },
          requiredFiles = {
              ".ansible-lint",
          }
        },
      },
      formatFiletypes = {
        lua = 'lua-format',
        go = 'gofumpt',
      },
      formatters = {
        ['lua-format'] = {
          command = 'lua-format',
          args = {
            '-i',
            '--no-keep-simple-control-block-one-line',
            '--no-keep-simple-function-one-line',
          },
        },
        gofumpt = {
          command = 'gofumpt',
          args = {
            '-s',
            '-extra',
            '-',
          },
          isStderr = false,
          isStdout = true,
        },
      }
    }
  }
}

if not lspconfig.psalmls then
  configs.psalmls = {
    default_config = {
      cmd = {'./vendor/bin/psalm-language-server'};
      filetypes = {'php'};
      root_dir = lspconfig.util.root_pattern( "psalm.xml", "psalm.xml.dist" );
      settings = {};
    };
  }
end

for server, config in pairs(servers) do
  config.on_attach = on_attach

  config.log_level = vim.lsp.protocol.MessageType.Log;
  config.message_level = vim.lsp.protocol.MessageType.Log;
  config.capabilities = vim.tbl_extend('keep', config.capabilities or {}, lsp_status.capabilities)

  lspconfig[server].setup(config)
end
