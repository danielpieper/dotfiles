local utils = require('utils')
-- local lsp_status = require('lsp-status')
local diagnostic = require('diagnostic')
local completion = require('completion')
local nvim_lsp = require('nvim_lsp')

-- Completion configuration
--
-- Intelephense Hotfix, see https://github.com/nvim-lua/completion-nvim/issues/252#issuecomment-716048547
vim.g.completion_enable_snippet = "snippets.nvim"

vim.api.nvim_set_var('completion_matching_ignore_case', 1)
vim.api.nvim_set_var('completion_matching_strategy_list', {"exact", "substring", "fuzzy"})

vim.api.nvim_set_var('completion_chain_complete_list', {
  { complete_items = { 'lsp', 'snippet', 'path', 'buffers' } },
  { mode = { '<c-p>' } },
  { mode = { '<c-n>' } }
})

-- Set completeopt to have a better completion experience
vim.o.completeopt = "menuone,noinsert,noselect"

-- Avoid showing message extra message when using completion
vim.o.shortmess = vim.o.shortmess .. "c"

utils.map("i", "<Tab>", [[ pumvisible() ? "\<C-n>" : "\<Tab>" ]], {expr = true})
utils.map(
  "i",
  "<S-Tab>",
  [[ pumvisible() ? "\<C-p>" : "\<S-Tab>" ]],
  {expr = true}
)

-- Diagnostic configuration
--
vim.api.nvim_set_var('diagnostic_enable_virtual_text', 1)
vim.api.nvim_set_var('diagnostic_virtual_text_prefix', 'ïš¦')
vim.api.nvim_set_var('diagnostic_insert_delay', 1)
vim.api.nvim_set_var('diagnostic_show_sign', 1)

local on_attach = function(client, bufnr)
  -- lsp_status.on_attach(client, bufnr)
  completion.on_attach(client, bufnr)
  diagnostic.on_attach(client, bufnr)

  -- Set the omnifunc for this buffer.
  vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
  -- Intelephense Hotfix, see https://github.com/nvim-lua/completion-nvim/issues/252#issuecomment-716048547
  -- Set $ as keyword to fix Intelephense (php) completion
  vim.api.nvim_buf_set_option(bufnr, "iskeyword", "@,48-57,_,192-255,$")

  -- Keybindings for LSPs
  local opts = { noremap=true, silent=true }
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gh", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<c-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gt", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>g0", "<cmd>lua vim.lsp.buf.document_symbol()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gW", "<cmd>lua vim.lsp.buf.workspace_symbol()<CR>", opts)

  vim.api.nvim_buf_set_keymap(bufnr, "n", "[c", ":PrevDiagnosticCycle<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "]c", ":NextDiagnosticCycle<CR>", opts)
end
-- lsp_status.register_progress()
-- lsp_status.config({
--   status_symbol = '',
--   indicator_errors = 'e',
--   indicator_warnings = 'w',
--   indicator_info = 'i',
--   indicator_hint = 'h',
--   indicator_ok = 'ok',
-- })

local servers = {
  'cssls',
  'bashls',
  'dockerls',
  'flow',
  'ghcide',
  'gopls',
  'hie',
  'html',
  'tsserver',
  'jsonls',
  'kotlin_language_server',
  'pyls',
  'rls',
  'rust_analyzer',
  'sourcekit',
  'vimls',
  'vuels',
  'sumneko_lua',
}
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
  }
end

nvim_lsp.diagnosticls.setup{
  filetypes = { "php", "go" },
  init_options = {
    filetypes = {
      php = {"phpcs", "phpmd", "phpstan"},
      go = "golangci-lint"
      -- javascript = 'eslint',
      -- markdown = 'markdownlint',
    },
    linters = {
      phpcs = {
        command = "phpcs",
        debounce = 100,
        rootPatterns = { "composer.json", "composer.lock", "vendor", ".git" },
        args = { "--standard=PSR12", "--report=emacs", "-s", "%file" },
        offsetLine = 0,
        offsetColumn = 0,
        sourceName = "phpcs",
        formatLines = 1,
        formatPattern = {
          "^.*:(\\d+):(\\d+):\\s+(.*)\\s+-\\s+(.*)(\\r|\\n)*$",
          {
            line = 1,
            column = 2,
            message = 4,
            security = 3,
          }
        },
        securities = {
          error = "error",
          warning = "warning"
        }
      },
      phpmd = {
        command = "phpmd",
        debounce = 100,
        rootPatterns = { "composer.json", "composer.lock", "vendor", ".git" },
        args = { "%file", "json", "phpmd.xml" },
        offsetLine = 0,
        offsetColumn = 0,
        sourceName = "phpmd",
        parseJson = {
          errorsRoot = "files[0].violations",
          line = "beginLine",
          endLine = "endLine",
          security = "priority",
          message = "${rule}: ${description} (${ruleSet})"
        },
        securities = {
          [1] = "error",
          [2] = "warning",
          [3] = "info"
        }
      },
      phpstan = {
        command = "phpstan",
        debounce = 100,
        rootPatterns = { "composer.json", "composer.lock", "vendor", ".git" },
        args = { "analyze", "--error-format", "raw", "--no-progress", "%file" },
        offsetLine = 0,
        offsetColumn = 0,
        sourceName = "phpstan",
        formatLines = 1,
        formatPattern = {
          "^[^:]+:(\\d+):(.*)(\\r|\\n)*$",
          {
            line = 1,
            message = 2,
          }
        }
      },
      ['golangci-lint'] = {
        command = "golangci-lint",
        rootPatterns = { ".git", "go.mod" },
        debounce = 100,
        args = { "run", "--out-format", "json", "--enable-all" },
        sourceName = "golangci-lint",
        parseJson = {
          errorsRoot = "Issues",
          sourceName = "Pos.Filename",
          sourceNameFilter = true,
          line = "LineRange.From",
          endLine = "LineRange.To",
          message = "${Text} (${FromLinter})"
        }
      }
    },
    formatters = {},
    formatFiletypes = {}
  }
}

{{- $licenseKey := "" -}}
{{- range (first (onepassword "ucpdges4uyo3uaj2kmhe4e5diq").details.sections).fields -}}
  {{- if eq .n "reg_code" -}}
    {{- $licenseKey = .v -}}
  {{- end -}}
{{- end }}

nvim_lsp.intelephense.setup{
  on_attach = on_attach,
{{- if ne $licenseKey "" }}
  init_options = {
    licenceKey = "{{ $licenseKey }}",
    clearCache = false
  }
{{- end }}
}
