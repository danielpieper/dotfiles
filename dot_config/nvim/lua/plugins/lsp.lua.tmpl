{{- $licenseKey := "" -}}
{{- range (first (onepassword "ucpdges4uyo3uaj2kmhe4e5diq").details.sections).fields -}}
  {{- if eq .n "reg_code" -}}
    {{- $licenseKey = .v -}}
  {{- end -}}
{{- end }}
local utils = require('utils')
local lsp_status = require('lsp-status')
local diagnostic = require('diagnostic')
local completion = require('completion')
local nvim_lsp = require('nvim_lsp')

-- Set log level
-- Levels by name: "trace", "debug", "info", "warn", "error"
-- vim.lsp.set_log_level("trace")

-- Completion configuration
--
-- Intelephense Hotfix, see https://github.com/nvim-lua/completion-nvim/issues/252#issuecomment-716048547
vim.g.completion_enable_snippet = "snippets.nvim"

-- vim.api.nvim_set_var('completion_matching_ignore_case', 1)
vim.api.nvim_set_var('completion_matching_smart_case', 1)
-- Disable sorting: this let's me decide the order by completion source
vim.api.nvim_set_var('completion_sorting', 'none') -- possible value: "length", "alphabet", "none"
vim.api.nvim_set_var('completion_matching_strategy_list', {"exact", "substring", "fuzzy"})

vim.api.nvim_set_var('completion_chain_complete_list', {
  { complete_items = { 'lsp', 'snippet', 'path', 'buffers' } },
  { mode = { '<c-p>' } },
  { mode = { '<c-n>' } }
})

-- Set completeopt to have a better completion experience
vim.o.completeopt = "menuone,noinsert,noselect"

-- Avoid showing message extra message when using completion
vim.o.shortmess = vim.o.shortmess .. "c"

utils.map("i", "<Tab>", [[ pumvisible() ? "\<C-n>" : "\<Tab>" ]], {expr = true})
utils.map(
  "i",
  "<S-Tab>",
  [[ pumvisible() ? "\<C-p>" : "\<S-Tab>" ]],
  {expr = true}
)

-- Diagnostic configuration
--
vim.api.nvim_set_var('diagnostic_enable_virtual_text', 1)
-- vim.api.nvim_set_var('diagnostic_trimmed_virtual_text', 40)
vim.api.nvim_set_var('diagnostic_virtual_text_prefix', 'ïš¦')
vim.api.nvim_set_var('diagnostic_insert_delay', 1)
vim.api.nvim_set_var('diagnostic_show_sign', 1)
-- disable underline to make text more readable
vim.api.nvim_set_var('diagnostic_enable_underline', 0) 

-- LSP Status configuration
--
lsp_status.register_progress()
-- lsp_status.config({
--   status_symbol = '',
--   indicator_errors = 'e',
--   indicator_warnings = 'w',
--   indicator_info = 'i',
--   indicator_hint = 'h',
--   indicator_ok = 'ok',
-- })


local on_attach = function(client, bufnr)
  lsp_status.on_attach(client, bufnr)
  completion.on_attach(client, bufnr)
  diagnostic.on_attach(client, bufnr)

  -- Set the omnifunc for this buffer.
  vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
  -- Intelephense Hotfix, see https://github.com/nvim-lua/completion-nvim/issues/252#issuecomment-716048547
  -- Set $ as keyword to fix Intelephense (php) completion
  vim.api.nvim_buf_set_option(bufnr, "iskeyword", "@,48-57,_,192-255,$")

  -- Always use autoindent 
  -- php workaround, see https://vi.stackexchange.com/questions/11023/auto-indent-turns-off-itself-automatically-on-php-files
  vim.api.nvim_buf_set_option(bufnr, "autoindent", true)
  vim.api.nvim_buf_set_option(bufnr, "smartindent", true)
  vim.api.nvim_buf_set_option(bufnr, "syntax", "on")

  -- Keybindings for LSPs
  local opts = { noremap=true, silent=true }
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gh", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<c-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gt", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>g0", "<cmd>lua vim.lsp.buf.document_symbol()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gW", "<cmd>lua vim.lsp.buf.workspace_symbol()<CR>", opts)
  -- Diagnostics
  vim.api.nvim_buf_set_keymap(bufnr, "n", "[c", ":PrevDiagnosticCycle<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "]c", ":NextDiagnosticCycle<CR>", opts)
  -- Formatting
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  -- Uncomment for auto-format befor save
  -- vim.api.nvim_command[[autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync()]]
end

local servers = {
  cssls = {},
  bashls = {},
  dockerls = {},
  flow = {},
  ghcide = {},
  gopls = {
    init_options = {
      completeUnimported = true,
      gofumpt = true
    },
  },
  hie = {},
  html = {},
  tsserver = {},
  jsonls = {},
  kotlin_language_server = {},
  terraformls = {},
  pyls = {},
  rls = {},
  rust_analyzer = {},
  sourcekit = {},
  vimls = {},
  vuels = {},
  sumneko_lua = {},
  intelephense = {
    settings = {
      intelephense = {
        diagnostics = {
          enable = 1,
          run = "onSave",
        }
      },
    },
{{- if ne $licenseKey "" }}
    init_options = {
      licenceKey = "{{ $licenseKey }}",
      -- clearCache = false
    }
{{- end }}
  },
  diagnosticls = {
    -- cmd = { "diagnostic-languageserver", "--log-level", "4", "--stdio" },
    filetypes = { "php", "go", "lua" },
    -- trace = "verbose", -- "off" | "messages" | "verbose" | nil
    init_options = {
      filetypes = {
        php = {"phpcs", "phpmd", "phpstan"},
        go = "golangci-lint"
        -- javascript = 'eslint',
        -- markdown = 'markdownlint',
      },
      linters = {
        phpcs = {
          command = "phpcs",
          debounce = 100,
          rootPatterns = { "composer.json", "composer.lock", "vendor", ".git" },
          args = { "--standard=PSR12", "--report=emacs", "-s", "%file" },
          offsetLine = 0,
          offsetColumn = 0,
          sourceName = "phpcs",
          formatLines = 1,
          formatPattern = {
            "^.*:(\\d+):(\\d+):\\s+(.*)\\s+-\\s+(.*)(\\r|\\n)*$",
            {
              line = 1,
              column = 2,
              message = 4,
              security = 3,
            }
          },
          securities = {
            error = "error",
            warning = "warning"
          }
        },
        phpmd = {
          command = "phpmd",
          debounce = 100,
          rootPatterns = { "composer.json", "composer.lock", "vendor", ".git" },
          args = { "%file", "json", "phpmd.xml" },
          offsetLine = 0,
          offsetColumn = 0,
          sourceName = "phpmd",
          parseJson = {
            errorsRoot = "files[0].violations",
            line = "beginLine",
            endLine = "endLine",
            security = "priority",
            message = "${rule}: ${description} (${ruleSet})"
          },
          securities = {
            [1] = "error",
            [2] = "warning",
            [3] = "info"
          }
        },
        phpstan = {
          command = "phpstan",
          debounce = 100,
          rootPatterns = { "composer.json", "composer.lock", "vendor", ".git" },
          args = { "analyze", "--error-format", "raw", "--no-progress", "%file" },
          offsetLine = 0,
          offsetColumn = 0,
          sourceName = "phpstan",
          formatLines = 1,
          formatPattern = {
            "^[^:]+:(\\d+):(.*)(\\r|\\n)*$",
            {
              line = 1,
              message = 2,
            }
          }
        },
        ['golangci-lint'] = {
          command = "golangci-lint",
          rootPatterns = { ".git", "go.mod" },
          debounce = 100,
          args = { "run", "--out-format", "json" },
          -- args = { "run", "--out-format", "json", "--enable-all" },
          sourceName = "golangci-lint",
          parseJson = {
            errorsRoot = "Issues",
            sourceName = "Pos.Filename",
            sourceNameFilter = true,
            line = "LineRange.From",
            endLine = "LineRange.To",
            message = "${Text} (${FromLinter})"
          }
        }
      },
      formatFiletypes = {
        lua = 'lua-format',
      },
      formatters = {
        ['lua-format'] = {
          command = 'lua-format',
          args = {
            '-i',
            '--no-keep-simple-control-block-one-line',
            '--no-keep-simple-function-one-line',
          },
        },
      }
    }
  }
}

for server, config in pairs(servers) do
  config.on_attach = on_attach

  -- Set default client capabilities plus window/workDoneProgress
  config.capabilities = vim.tbl_extend('keep', config.capabilities or {}, lsp_status.capabilities)

  -- config.log_level = vim.lsp.protocol.MessageType.Log;
  -- config.message_level = vim.lsp.protocol.MessageType.Log;

  nvim_lsp[server].setup(config)
end

