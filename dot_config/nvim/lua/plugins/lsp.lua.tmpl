local utils = require('utils')
local lsp_status = require('lsp-status')
local diagnostic = require('diagnostic')
local completion = require('completion')
local nvim_lsp = require('nvim_lsp')
local configs = require('nvim_lsp/configs')

-- vim.g.completion_matching_strategy_list = {"exact", "substring", "fuzzy"}
-- vim.g.completion_matching_ignore_case = 1

-- Set completeopt to have a better completion experience
vim.o.completeopt = "menuone,noinsert,noselect"

-- Avoid showing message extra message when using completion
vim.o.shortmess = vim.o.shortmess .. "c"

utils.map("i", "<Tab>", [[ pumvisible() ? "\<C-n>" : "\<Tab>" ]], {expr = true})
utils.map(
  "i",
  "<S-Tab>",
  [[ pumvisible() ? "\<C-p>" : "\<S-Tab>" ]],
  {expr = true}
)

local on_attach = function(client, bufnr)
  lsp_status.on_attach(client, bufnr)
  completion.on_attach(client, bufnr)
  diagnostic.on_attach(client, bufnr)

  -- Set the omnifunc for this buffer.
  vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")

  -- Keybindings for LSPs
  local opts = { noremap=true, silent=true }
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gd", "<cmd>lua vim.lsp.buf.definition()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gh", "<cmd>lua vim.lsp.buf.hover()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gi", "<cmd>lua vim.lsp.buf.implementation()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<c-k>", "<cmd>lua vim.lsp.buf.signature_help()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gt", "<cmd>lua vim.lsp.buf.type_definition()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gr", "<cmd>lua vim.lsp.buf.references()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>g0", "<cmd>lua vim.lsp.buf.document_symbol()<CR>", opts)
  vim.api.nvim_buf_set_keymap(bufnr, "n", "<leader>gW", "<cmd>lua vim.lsp.buf.workspace_symbol()<CR>", opts)
end
-- lsp_status.register_progress()
-- lsp_status.config({
--   status_symbol = '',
--   indicator_errors = 'e',
--   indicator_warnings = 'w',
--   indicator_info = 'i',
--   indicator_hint = 'h',
--   indicator_ok = 'ok',
-- })

{{- $licenseKey := "" -}}
{{- range (first (onepassword "ucpdges4uyo3uaj2kmhe4e5diq").details.sections).fields -}}
  {{- if eq .n "reg_code" -}}
    {{- $licenseKey = .v -}}
  {{- end -}}
{{- end }}

nvim_lsp.intelephense.setup{
  on_attach = on_attach,
  -- capabilities = lsp_status.capabilities
  -- log_level = vim.lsp.protocol.MessageType.Log,
  -- message_level = vim.lsp.protocol.MessageType.Log,
 {{- if ne $licenseKey "" }}
  init_options = {
    licenceKey = "{{ $licenseKey }}",
    -- clearCache = true,
  }
{{- end }}
}

local servers = {
  'cssls',
  'bashls',
--  'diagnosticls',
  'dockerls',
  'flow',
  'ghcide',
  'gopls',
  'hie',
  'html',
  'tsserver',
  'jsonls',
  'kotlin_language_server',
  'pyls',
  'rls',
  'rust_analyzer',
  'sourcekit',
  'vimls',
  'vuels',
  'sumneko_lua',
}
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
  }
end

